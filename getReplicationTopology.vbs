' Overview:
' Script queries all domain controllers regarding to their viewpoint of ph topology generated by local KCC process.
' Output is formated into dot syntax file to visualize it by GraphViz, etc.

'
' Syntax to generate dot: cscript /nologo getReplicationTopology.vbs

' Syntax to generate jpg: dot replicationTopology.dot -Tjpg -O
' Syntax to generate jpg: circo replicationTopology.dot -Tjpg -O
'
'
' Author: wojciech@pazdzierkiewicz.pl
'
' ver. 0.5

'
' Main logic
'

'On Error Resume Next

Set dictAllDCs = CreateObject("Scripting.Dictionary")
Set dictAccessibleDCs = CreateObject("Scripting.Dictionary")
Set dictNotAccessibleDCs = CreateObject("Scripting.Dictionary")
Set dictSites = CreateObject("Scripting.Dictionary")
Set dictSiteDCs = CreateObject("Scripting.Dictionary")
Set dictConnections = CreateObject("Scripting.Dictionary")
Set dictSubnets = CreateObject("Scripting.Dictionary")

getDCs

dtm_ = Now()
strDate = Right("00" & Day(dtm_),2) & "-" & Right("00" & Month(dtm_),2) & "-" & Year(dtm_)
strTime = strDate & "_" & Right("00" & Hour(dtm_), 2) & "-" & Right("00" & Minute(dtm_), 2) & "-" & Right("00" & Second(dtm_), 2) 
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objLogFile = objFSO.OpenTextFile("getReplicationTopology_" & strTime &  ".dot", 8, True) 

run_ = 0

WScript.Echo "1. Checking access"

For Each strDC in dictAllDCs

	WScript.Echo strDC & ":..."

	Set objRootDSE = GetObject("LDAP://RootDSE")
	Set objSitesContainer = GetObject("LDAP://" & strDC & "/cn=Sites," & objRootDSE.Get("configurationNamingContext") )

	If Err.Number <> 0 Then

		WScript.Echo "Not accessible: " & Err.Number & ";" & Hex(Err.Number) & ";" & Err.Source & ";" & Err.Description

		If Not dictNotAccessibleDCs.Exists(strDC) Then

			dictNotAccessibleDCs.Add strDC, 0

		End If

		Err.Clear

	Else

		WScript.Echo "Accessible"

		If Not dictAccessibleDCs.Exists(strDC) Then

			dictAccessibleDCs.Add strDC, 0

		End If

		
	End If 'Err strDC

Next 'strDC

WScript.Echo
WScript.Echo "2. Checking topology"

For Each strDC in dictAccessibleDCs

	WScript.Echo strDC & ":..."

	Set objRootDSE = GetObject("LDAP://RootDSE")
	Set objSitesContainer = GetObject("LDAP://" & strDC & "/cn=Sites," & objRootDSE.Get("configurationNamingContext") )

	objSitesContainer.Filter = Array("site")

	For Each objSite In objSitesContainer

		If Not dictSites.Exists(objSite.CN) Then

			dictSites.Add objSite.CN, 0
			
		End If
			
		Set objServersContainer = GetObject("LDAP://" & strDC & "/cn=Servers," & objSite.Name & ",cn=Sites," & objRootDSE.Get("configurationNamingContext") )
		
		For Each objServer In objServersContainer
		
			Set objNTDSContainer = GetObject("LDAP://" & strDC & "/cn=NTDS Settings,cn=" & objServer.CN & ",cn=Servers," & objSite.Name & ",cn=Sites," & objRootDSE.Get("configurationNamingContext") )
			objNTDSContainer.Filter = Array("ntdsConnection")
			
			strServer = Replace(objServer.CN,"-","_")
	
			If Err.Number <> 0 Then

				WScript.Echo "Orphan: " & objSite.CN & ":" & strServer & ":" & Err.Number & ";" & Hex(Err.Number) & ";" & Err.Source & ";" & Err.Description
	
				strLabel = "[label = """ & objServer.dNSHostName & """" & " image = """ & "orphan.png" & """" & "]"
				Err.Clear
				
			Else
	
				If dictNotAccessibleDCs.Exists(objServer.CN) Then

					strLabel = "[label = """ & objServer.dNSHostName & """" & " image = """ & "noaccess.png" & """" & "]"
				
				Else

					strLabel = "[label = """ & objServer.dNSHostName & """" & "]"

				End If
			
				For Each objConnection in objNTDSContainer
			
					strFromServer = Split(objConnection.fromServer, ",")(1)
					strFromServer = Right(strFromServer,Len(strFromServer) - Len("CN=")) 'cut off CN=
					strFromServer = Replace(strFromServer,"-","_")

					strConnection = strFromServer & " -> " &  strServer

					If Not dictConnections.Exists(strConnection) Then

						If run_ = 0 Then

							dictConnections.Add strConnection, 0
							strRefDC = strDC
	
						Else
							strConnection = strConnection & " [label = """ & strServer & """" & " color = red]"

							If Not dictConnections.Exists(strConnection) Then

								dictConnections.Add strConnection, 0

							End If
		
						End If
		
					End If
								
				Next 'objConnection

			End If 'Err in NTDS Settings

			If Not dictSiteDCs.Exists(strServer & " " & strLabel) Then

				dictSiteDCs.Add strServer & " " & strLabel, objSite.CN

			End If
		
		Next 'objServer
				
	Next 'objSite

	run_ = run_ + 1

Next 'strDC

'Formating output into dot syntax:
'1. Header
objLogFile.Write  "DIGRAPH replicationTopology {" & vbCrlF
objLogFile.Write   "" & vbCrlF
objLogFile.Write  vbTab & "label = """ & "Reference DC: " & strRefDC & """" & ";" & vbCrlF
objLogFile.Write  vbTab & "labelloc = t;" & vbCrlF
objLogFile.Write  vbTab & "fontname = helvetica;" & vbCrlF
objLogFile.Write  vbTab & "node [fontname = helvetica, image = ""server.png"", labelloc = b, color = white];" & vbCrlF
objLogFile.Write  vbTab & "edge [style = dotted fontname = helvetica fontsize = 8.0];" & vbCrlF
objLogFile.Write  "" & vbCrlF
	
'2. Clusters
For Each strSite in dictSites

	strSubnets = "Subnets:\l"
	For Each objSubnet in dictSubnets

		If dictSubnets.Item(objSubnet) = strSite Then

			strSubnets = strSubnets & objSubnet & "\l" 

		End If

	Next 'objSubnet

	objLogFile.Write vbTab & "SUBGRAPH cluster_" & Replace(strSite,"-","_") & " {" & vbCrlF
	objLogFile.Write vbTab & "label = ""Site: " & strSite & "\l" & strSubnets & """" & vbCrlF
	objLogFile.Write "" & vbCrlF

	For Each strSiteDC in dictSiteDCs

		If dictSiteDCs.Item(strSiteDC) = strSite Then

			objLogFile.Write vbTab & strSiteDC & ";" & vbCrlF

		End If

	Next 'strSiteDC

	objLogFile.Write "" & vbCrlF
	objLogFile.Write vbTab & "}" & vbCrlF
	objLogFile.Write "" & vbCrlF

Next 'strSite

'3. Connections
For Each strConnection In dictConnections
	
	objLogFile.Write vbTab & strConnection & ";" & vbCrlF
		
Next 'strConnection
	
objLogFile.Write "" & vbCrlF
objLogFile.Write "}" & vbCrlF
objLogFile.Write "" & vbCrlF
objLogFile.Close
'Dot syntax eof

dictAllDCs.RemoveAll
dictAccessibleDCs.RemoveAll
dictNotAccessibleDCs.RemoveAll
dictSites.RemoveAll
dictSiteDCs.RemoveAll
dictConnections.RemoveAll
dictSubnets.RemoveAll

Set objLogFile = Nothing
Set objFSO = Nothing

'Main logic eof

'
' Subs
'
Sub getDCs
' Procedure queries AD to enumerate all domain controllers and subnets
' and loads them into global dictionary dictAllDCs
' and dictSubnets

'On Error Resume Next
Const ADS_SCOPE_SUBTREE = 2

	'Setting logon DC in 1st place in dict

	Set objWSH = CreateObject("WScript.Shell")
	Set objEnv = objWSH.Environment("Process")
	strLogonDC = objEnv("LOGONSERVER")
	strLogonDC = Right(strLogonDC,Len(strLogonDC) - Len("\\")) 'cut off \\

	If Not dictAllDCs.Exists(strLogonDC) Then

		dictAllDCs.Add strLogonDC, 0

	End If

	Set objRootDSE = GetObject("LDAP://RootDSE")
	strConfigurationNC = objRootDSE.Get("configurationNamingContext")

	Set objConnection = CreateObject("ADODB.Connection")
	Set objCommand =   CreateObject("ADODB.Command")
	objConnection.Provider = "ADsDSOObject"
	objConnection.Open "Active Directory Provider"
	Set objCommand.ActiveConnection = objConnection

	objCommand.Properties("Page Size") = 1000
	objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE

	'Enumeration of all other DCs

	objCommand.CommandText = "SELECT ADsPath FROM 'LDAP://" & strConfigurationNC & "' WHERE objectClass='nTDSDSA'"
	Set objRecordSet = objCommand.Execute

	objRecordSet.MoveFirst
	Do Until objRecordSet.EOF

		Set objParent = GetObject(GetObject(objRecordset.Fields("ADsPath")).Parent)

		If Not dictAllDCs.Exists(objParent.CN) Then

			dictAllDCs.Add objParent.CN, 0

		End If
		
		objRecordSet.MoveNext
	Loop

	'Enumeration of all subnets

	Set objRootDSE = GetObject("LDAP://RootDSE")
	Set objSubnetContainer = GetObject("LDAP://" & strLogonDC & "/cn=Subnets,cn=Sites," & objRootDSE.Get("configurationNamingContext") )

	objSubnetContainer.Filter = Array("subnet")

	For Each objSubnet In objSubnetContainer
	
		If objSubnet.siteObject <> "" Then	
			If Not dictSubnets.Exists(objSubnet.CN) Then

				strSite = Split(objSubnet.siteObject, ",")(0)
				strSite = Right(strSite,Len(strSite) - Len("CN=")) 'cut off CN=
				dictSubnets.Add objSubnet.CN, strSite

				'WScript.Echo objSubnet.CN & ":" & strSite

			End If
		End If

	Next 'objSubnet

	Set objEnv = Nothing
	Set objWSH = Nothing

End Sub 'getDCs

'Subs eof

'EoF